// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Attack.proto

#ifndef PROTOBUF_INCLUDED_Attack_2eproto
#define PROTOBUF_INCLUDED_Attack_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Attack_2eproto 

namespace protobuf_Attack_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Attack_2eproto
class Attack;
class AttackDefaultTypeInternal;
extern AttackDefaultTypeInternal _Attack_default_instance_;
namespace google {
namespace protobuf {
template<> ::Attack* Arena::CreateMaybeMessage<::Attack>(Arena*);
}  // namespace protobuf
}  // namespace google

enum Attack_CommandType {
  Attack_CommandType_WAIT = 0,
  Attack_CommandType_FIRE = 1,
  Attack_CommandType_Attack_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Attack_CommandType_Attack_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Attack_CommandType_IsValid(int value);
const Attack_CommandType Attack_CommandType_CommandType_MIN = Attack_CommandType_WAIT;
const Attack_CommandType Attack_CommandType_CommandType_MAX = Attack_CommandType_FIRE;
const int Attack_CommandType_CommandType_ARRAYSIZE = Attack_CommandType_CommandType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Attack_CommandType_descriptor();
inline const ::std::string& Attack_CommandType_Name(Attack_CommandType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Attack_CommandType_descriptor(), value);
}
inline bool Attack_CommandType_Parse(
    const ::std::string& name, Attack_CommandType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Attack_CommandType>(
    Attack_CommandType_descriptor(), name, value);
}
// ===================================================================

class Attack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Attack) */ {
 public:
  Attack();
  virtual ~Attack();

  Attack(const Attack& from);

  inline Attack& operator=(const Attack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Attack(Attack&& from) noexcept
    : Attack() {
    *this = ::std::move(from);
  }

  inline Attack& operator=(Attack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Attack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Attack* internal_default_instance() {
    return reinterpret_cast<const Attack*>(
               &_Attack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Attack* other);
  friend void swap(Attack& a, Attack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Attack* New() const final {
    return CreateMaybeMessage<Attack>(NULL);
  }

  Attack* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Attack>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Attack& from);
  void MergeFrom(const Attack& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Attack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Attack_CommandType CommandType;
  static const CommandType WAIT =
    Attack_CommandType_WAIT;
  static const CommandType FIRE =
    Attack_CommandType_FIRE;
  static inline bool CommandType_IsValid(int value) {
    return Attack_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    Attack_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    Attack_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    Attack_CommandType_CommandType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CommandType_descriptor() {
    return Attack_CommandType_descriptor();
  }
  static inline const ::std::string& CommandType_Name(CommandType value) {
    return Attack_CommandType_Name(value);
  }
  static inline bool CommandType_Parse(const ::std::string& name,
      CommandType* value) {
    return Attack_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // sint32 Yaw = 1;
  void clear_yaw();
  static const int kYawFieldNumber = 1;
  ::google::protobuf::int32 yaw() const;
  void set_yaw(::google::protobuf::int32 value);

  // sint32 Pitch = 2;
  void clear_pitch();
  static const int kPitchFieldNumber = 2;
  ::google::protobuf::int32 pitch() const;
  void set_pitch(::google::protobuf::int32 value);

  // int32 Number = 3;
  void clear_number();
  static const int kNumberFieldNumber = 3;
  ::google::protobuf::int32 number() const;
  void set_number(::google::protobuf::int32 value);

  // .Attack.CommandType Command = 4;
  void clear_command();
  static const int kCommandFieldNumber = 4;
  ::Attack_CommandType command() const;
  void set_command(::Attack_CommandType value);

  // @@protoc_insertion_point(class_scope:Attack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 yaw_;
  ::google::protobuf::int32 pitch_;
  ::google::protobuf::int32 number_;
  int command_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_Attack_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Attack

// sint32 Yaw = 1;
inline void Attack::clear_yaw() {
  yaw_ = 0;
}
inline ::google::protobuf::int32 Attack::yaw() const {
  // @@protoc_insertion_point(field_get:Attack.Yaw)
  return yaw_;
}
inline void Attack::set_yaw(::google::protobuf::int32 value) {
  
  yaw_ = value;
  // @@protoc_insertion_point(field_set:Attack.Yaw)
}

// sint32 Pitch = 2;
inline void Attack::clear_pitch() {
  pitch_ = 0;
}
inline ::google::protobuf::int32 Attack::pitch() const {
  // @@protoc_insertion_point(field_get:Attack.Pitch)
  return pitch_;
}
inline void Attack::set_pitch(::google::protobuf::int32 value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:Attack.Pitch)
}

// int32 Number = 3;
inline void Attack::clear_number() {
  number_ = 0;
}
inline ::google::protobuf::int32 Attack::number() const {
  // @@protoc_insertion_point(field_get:Attack.Number)
  return number_;
}
inline void Attack::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:Attack.Number)
}

// .Attack.CommandType Command = 4;
inline void Attack::clear_command() {
  command_ = 0;
}
inline ::Attack_CommandType Attack::command() const {
  // @@protoc_insertion_point(field_get:Attack.Command)
  return static_cast< ::Attack_CommandType >(command_);
}
inline void Attack::set_command(::Attack_CommandType value) {
  
  command_ = value;
  // @@protoc_insertion_point(field_set:Attack.Command)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Attack_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Attack_CommandType>() {
  return ::Attack_CommandType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Attack_2eproto
